# -*- coding: utf-8 -*-
"""Bird_strikes_analysis_DDG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19483xm7cdC0P9_ZIUC2jpR8DqKxwE3l8

# Bird Strikes Data Analysis
Analysis By: **Dipean Dasgupta**<br>
UNID: **UMIP4841**

**Importing Libraries**
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

"""**Connecting Drive**"""

from google.colab import drive
drive.mount('/content/drive')

DS=pd.read_csv('/content/drive/MyDrive/UM_Projects_data/Bird Strikes data.csv')

DS.head()

DF1=pd.DataFrame(DS)

"""**Yearly Analysis & Bird Strikes in the US**"""

DS['FlightDate'] = pd.to_datetime(DS['FlightDate'])
DS['Year'] = DS['FlightDate'].dt.year

# Grouping by year and sum the number of bird strikes
yearly_bird_strikes = DS.groupby('Year')['Wildlife: Number Struck Actual'].sum()

# Plotting the bar chart
ax = yearly_bird_strikes.plot(kind='bar',
                              title='Yearly Trends of Bird Strikes in US',
                              xlabel='Year',
                              ylabel='Total Bird Strikes',
                              color='skyblue')


ax.set_xticks(range(len(yearly_bird_strikes.index)))
ax.set_xticklabels(yearly_bird_strikes.index.astype(int), rotation=0)

plt.show()

"""**Visuals Depicting the Number of Bird Strikes**"""

# Grouping by 'Origin State' and sum the number of bird strikes
state_bird_strikes = DS.groupby('Origin State')['Wildlife: Number Struck Actual'].sum()

# Plotting the bar chart
fig, ax = plt.subplots(figsize=(15, 8))
state_bird_strikes.plot(kind='bar',
                        title='Total Bird Strikes by State',
                        xlabel='State',
                        ylabel='Total Bird Strikes',
                        color='seagreen',
                        ax=ax)

plt.show()

plt.figure(figsize=(12, 6))
DS['Wildlife: Species'].value_counts().head(10).plot(kind='bar', color='lightcoral')
plt.title('Top 10 Wildlife Species Involved in Bird Strikes')
plt.xlabel('Wildlife Species')
plt.ylabel('Number of Bird Strikes')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Top 10 US Airlines in terms of having encountered bird strikes**"""

# Grouping by 'Aircraft: Airline/Operator' and sum the number of bird strikes
top_airlines = DS.groupby('Aircraft: Airline/Operator')['Wildlife: Number Struck Actual'].sum().nlargest(10)

# Plotting the horizontal bar chart
fig, ax = plt.subplots(figsize=(10, 6))
top_airlines.plot(kind='barh',
                  title='Top 10 Airlines by Total Bird Strikes',
                  xlabel='Total Bird Strikes',
                  ylabel='Airline',
                  color='olive',
                  ax=ax)

plt.show()

"""**Airports with most incidents of bird strikes â€“ Top 50**"""

# Grouping by 'Airport: Name' and sum the number of bird strikes
top_airports = DS.groupby('Airport: Name')['Wildlife: Number Struck Actual'].sum().nlargest(50)

# Plotting the bar chart
fig, ax = plt.subplots(figsize=(15, 8))
top_airports.plot(kind='bar',
                  title='Top 50 Airports by Total Bird Strikes',
                  xlabel='Airport',
                  ylabel='Total Bird Strikes',
                  color='purple',
                  ax=ax)


ax.set_xticklabels(top_airports.index, rotation=90)

plt.show()

"""**Yearly Cost Incurred due to Bird Strikes**"""

DF1['Cost: Total $'] = DF1['Cost: Total $'].replace('[\$,]', '', regex=True)
DF1['Cost: Total $'] = pd.to_numeric(DF1['Cost: Total $'], errors='coerce')
DF1['Cost: Total $'] = DF1['Cost: Total $'].fillna(0)
DF1['Incident Year'] = pd.to_datetime(DF1['FlightDate']).dt.year

#Grouping by 'Incident Year' and calculate the total cost per year
yearly_cost = DF1.groupby('Incident Year')['Cost: Total $'].sum()

# Plotting the line chart
fig, ax = plt.subplots(figsize=(12, 6))
yearly_cost.plot(kind='line',
                 title='Yearly Total Cost of Bird Strikes',
                 xlabel='Year',
                 ylabel='Total Cost ($)',
                 color='red',
                 ax=ax)

plt.grid(True)
plt.show()

"""**Altitude of aeroplanes at the time of strike**"""

altitude_distribution = DS['Altitude bin'].value_counts()

def autopct_format(values):
    def my_format(pct):
        total = sum(values)
        val = int(round(pct * total / 100.0))
        return '{:.1f}%\n({:d})'.format(pct, val)
    return my_format

# Plotting the pie chart
plt.figure(figsize=(6, 3))
plt.pie(altitude_distribution,
        labels=altitude_distribution.index,
        autopct=autopct_format(altitude_distribution),
        startangle=140)
plt.axis('equal')
plt.title('Distribution of Altitude Bins')
plt.show()

"""**Phase of Flight**"""

# Calculating the distribution of 'Phase of Flight'
phase_of_flight = DS['When: Phase of flight'].value_counts()
print(phase_of_flight)
# Plotting the horizontal bar chart
plt.figure(figsize=(10, 6))
phase_of_flight.plot(kind='barh', color='skyblue')
plt.xlabel('Number of Bird Strikes')
plt.ylabel('Phase of Flight')
plt.title('Phases of Flight at time of Strike')
plt.show()

"""**Impact to Flight**"""

effect_of_flight_impact = DS['Effect: Impact to flight'].value_counts()

def autopct_format(values):
    def my_format(pct):
        total = sum(values)
        val = int(round(pct * total / 100.0))
        return '{:.1f}%\n({:d})'.format(pct, val)
    return my_format

# Plotting the pie chart
plt.figure(figsize=(8, 4))
plt.pie(effect_of_flight_impact,
        labels=effect_of_flight_impact.index,
        autopct=autopct_format(effect_of_flight_impact),
        startangle=140)
plt.axis('equal')
plt.title('Distribution of Effect of Bird Strikes on Flight')
plt.show()

"""**Pilot warning vs Impact to Flight**"""

pilot_warning_effect_relation = DS.groupby(['Pilot warned of birds or wildlife?', 'Effect: Impact to flight']).size().unstack()
plt.figure(figsize=(6, 4))
sns.heatmap(pilot_warning_effect_relation, annot=True, cmap='coolwarm', fmt='d')
plt.title('Relationship between Pilot Warning and Effect of Bird Strikes on Flight')
plt.xlabel('Effect: Impact to flight')
plt.ylabel('Pilot warned of birds or wildlife?')
plt.show()